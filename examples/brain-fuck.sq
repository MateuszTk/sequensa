
load "stdio"
load "string"
load "utils"

#{

	#std:out << "Sequnesa Brainfuck interpreter, press ENTER to execute and exit\n:"
	set prog << #[ "[", "]", "+", "-", ".", ",", ">", "<" ] << #std:explode << #std:in << null
	
	set pos << 0
	set mem << 0
	set val << 0
	set off << 0
	
	set modify << {
		first; set x << 0
		set f << ((x :: 0) = (pos :: 0))
		set x << (x :: 0 + 1)
				
		#return << #(val :: 0) << #[true] << f
		#return << #number << #@ << #[false] << f
	}
	
	set find << {
		first; set cnt << 0
		first; set ofc << off
		set cch << (prog :: (ofc :: 0))
		
		#{
			set cnt << (cnt :: 0 - 1)
		} << #[ "]" ] << cch
		
		#{
			set cnt << (cnt :: 0 + 1)
		} << #[ "[" ] << cch
		
		//#std:out << "Find status: cnt=" << cnt << " ofc=" << ofc << " cch=" << cch << std:br
		
		set ofc << (ofc :: 0 + @)
		
		#exit << #{
			#std:out << "\n"
			#return << #std:concat << "Unmached bracket at pos: " << #string << off
		} << #[null] << cch
		#final << #ofc << #[0] << cnt
		#again << @
	}
	
	#exit << #{
	
		set chr << (prog :: (off :: 0))
		set run << @
		
		#{
			#{
				set off << @
			} << #find << #1 << #[true] << (mem :: (pos :: 0) = 0)
		} << #[ "[" ] << chr
		
		#{
			#{
				set off << (@ + 1)
			} << #find << #(0 - 1) << #[false] << (mem :: (pos :: 0) = 0)
		} << #[ "]" ] << chr
		
		#{ 
			set pos << (pos :: 0 + 1) 
			#{
				set mem << mem << 0
			} << #[null] << (mem :: (pos :: 0))
		} << #[ ">" ] << chr
		
		#{ 
			set pos << (pos :: 0 - 1) 
			#{
				set pos << 0
			} << #[null] << (mem :: (pos :: 0))
		} << #[ "<" ] << chr
		
		#{ 
			set val << #{
				#final << #0 << #[true] << (@ > 255)
				#final << @
			} << (mem :: (pos :: 0) + 1)
			set mem << #modify << mem
		} << #[ "+" ] << chr
		
		#{ 
			set val << #{
				#final << #255 << #[true] << (@ < 0) << null
				#final << @
			} << (mem :: (pos :: 0) - 1)
			set mem << #modify << mem
		} << #[ "-" ] << chr
		
		#{ 
			#std:out << #std:from_code << (mem :: (pos :: 0))
		} << #[ "." ] << chr
		
		#{ 
			set val << #std:to_code << #std:in << null
			set mem << #modify << mem
		} << #[ "," ] << chr
		
		set off << (off :: 0 + 1)
		#final << #{ 
			#std:out << "\n" 
			#return << "Reached end of input"
		} << #[null] << chr
		
		//#std:out << "Status: pos=" << pos << " val=" << (mem :: (pos :: 0)) << " off=" << off << " mem=" << (
		//	<< #{
		//		#return << @ << ","
		//	} << mem
		//) << std:br 
		#again << #[true] << run

	} << true

} << null
